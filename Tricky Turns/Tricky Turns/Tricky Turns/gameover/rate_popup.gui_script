local data = require('main.data')

function init(self)
	self.container = gui.get_node('container')
	self.popup = gui.get_node('popup')
	self.buttons = {}
	for i = 1, 5 do
		self.buttons['star'..i] = {gui.get_node('star'..i)}
	end
	self.buttons.close = {gui.get_node('b2'), gui.get_node('t2')}
	self.title = gui.get_node('title')
	self.sub_title = gui.get_node('sub_title')
	local size = vmath.vector3(data.screen_width, data.screen_height, 0)
	gui.set_size(self.container, size)
	gui.set_color(self.container, vmath.vector4(0, 0, 0, 0))
	gui.set_scale(self.popup, vmath.vector3(0, 0, 0))
	gui.set_enabled(self.container, false)
end

local function animate_in(self)
	gui.animate(self.container, 'color', vmath.vector4(0, 0, 0, 0.5), gui.EASING_LINEAR, 0.1)
	gui.animate(self.popup, 'scale', vmath.vector3(1, 1, 1), gui.EASING_LINEAR, 0.2, 0, function()
		msg.post('.', 'acquire_input_focus')
	end)
end

local function animate_out(self)
	gui.animate(self.container, 'color', vmath.vector4(0, 0, 0, 0), gui.EASING_LINEAR, 0.1)
	gui.animate(self.popup, 'position.y', data.max_y / 1.5, gui.EASING_LINEAR, 0.2, 0, function()
		gui.set_enabled(self.container, false)
		msg.post('go', 'acquire_input_focus')
		gui.set_scale(self.popup, vmath.vector3(0, 0, 0))
		gui.set_position(self.popup, vmath.vector3(0, 0, 0))
	end)
end

function on_message(self, message_id, message, sender)
	if message_id == hash('show_popup') then
		for k, v in pairs(self.buttons) do
			if k ~= 'close' then
				gui.set_color(v[1], vmath.vector4(195/255, 195/255, 195/255, 1))
			end
		end
		gui.set_enabled(self.container, true)
		animate_in(self)
	end
end

local function animate_button(self)
	local i = (self.pressed_button[2] == nil) and 1 or 2
	local color = gui.get_color(self.pressed_button[i])
	color.w = (color.w < 1) and 1 or 0.6
	gui.set_color(self.pressed_button[i], color)
end

local function handle_button(self)
	if self.pressed_button == self.buttons.close then
		msg.post('.', 'release_input_focus')
		animate_out(self)
	else
		local num
		for k, v in pairs(self.buttons) do
			if k ~= 'close' then
				gui.set_color(v[1], vmath.vector4(195/255, 195/255, 195/255, 1))
				if v == self.pressed_button then
					num = string.sub(k, -1)
				end
			end
		end
		for i = 1, num do
			gui.set_color(self.buttons['star'..i][1], data.popup_color)
		end
		msg.post('.', 'release_input_focus')
		timer.delay(0.5, false, function()
			animate_out(self)
			if tonumber(num) > 3 then
				local url = (data.system_name == 'iPhone OS') and data.app_store_url..'?action=write-review' or data.play_store_url
				local url_success = sys.open_url(url)
				if not url_success then
					print('could not open url')
				end
			else
				local url_success = sys.open_url('mailto:'..data.feedback_email..'?subject=Game%20Feedback&body=Let%20us%20know%20how%20we%20can%20improve.')
				if not url_success then
					print('could not open url')
				end
			end
		end)	
	end
end

function on_input(self, action_id, action)
	if action_id == hash('touch') then
		if action.pressed then
			for k, v in pairs(self.buttons) do
				if gui.pick_node(v[1], action.x, action.y) then
					self.pressed_button = v
					animate_button(self)
					break
				end
			end	
		elseif action.released and self.pressed_button then
			animate_button(self)
			if gui.pick_node(self.pressed_button[1], action.x, action.y) then
				msg.post('main:/sound#button', 'play_sound')
				handle_button(self)
			end
			self.pressed_button = nil
		end
	end
end