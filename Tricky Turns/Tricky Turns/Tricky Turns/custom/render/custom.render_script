local data = require('main.data')
--
-- projection that centers content with maintained aspect ratio and optional zoom
--
local function fixed_projection(near, far, zoom)
	local projected_width = render.get_window_width() / (zoom or 1)
	local projected_height = render.get_window_height() / (zoom or 1)
	local xoffset = -(projected_width - render.get_width()) / 2
	local yoffset = -(projected_height - render.get_height()) / 2
	return vmath.matrix4_orthographic(xoffset, xoffset + projected_width, yoffset, yoffset + projected_height, near, far)
end
--
-- projection that centers and fits content with maintained aspect ratio
--
local function fixed_fit_projection(near, far)
	local width = render.get_width()
	local height = render.get_height()
	local window_width = render.get_window_width()
	local window_height = render.get_window_height()
	local zoom = math.min(window_width / width, window_height / height)
	return fixed_projection(near, far, zoom)
end
--
-- projection that stretches content
--
local function stretch_projection(near, far)
	return vmath.matrix4_orthographic(0, render.get_width(), 0, render.get_height(), near, far)
end

local function get_projection(self)
	return self.projection_fn(self.near, self.far, self.zoom)
end

local function update_screen_data(self)
	local native_res = {
		w = render.get_window_width(),
		h = render.get_window_height()
	}
	local screen_ratio = native_res.h / native_res.w
	if screen_ratio > self.project_ratio then
		local scale = data.project_width / native_res.w
		data.screen_height = native_res.h * scale
		data.screen_width = data.screen_height / screen_ratio
		local y_offset = (data.screen_height - data.project_height) / 2
		data.min_y = -y_offset
		data.max_y = data.project_height + y_offset
		data.min_x = 0
		data.max_x = data.project_width
	else
		local scale = data.project_height / native_res.h
		data.screen_width = native_res.w * scale
		data.screen_height = data.screen_width * screen_ratio
		local x_offset = (data.screen_width - data.project_width) / 2
		data.min_x = -x_offset
		data.max_x = data.project_width + x_offset
		data.min_y = 0
		data.max_y = data.project_height
	end
end

function init(self)
	self.tile_pred = render.predicate({"tile"})
	self.gui_pred = render.predicate({"gui"})
	self.text_pred = render.predicate({"text"})
	self.particle_pred = render.predicate({"particle"})

	self.clear_color = vmath.vector4(0, 0, 0, 0)
	self.clear_color.x = sys.get_config("render.clear_color_red", 0)
	self.clear_color.y = sys.get_config("render.clear_color_green", 0)
	self.clear_color.z = sys.get_config("render.clear_color_blue", 0)
	self.clear_color.w = sys.get_config("render.clear_color_alpha", 0)

	self.view = vmath.matrix4()

	-- default is stretch projection. copy from builtins and change for different projection
	-- or send a message to the render script to change projection:
	-- msg.post("@render:", "use_stretch_projection", { near = -1, far = 1 })
	-- msg.post("@render:", "use_fixed_projection", { near = -1, far = 1, zoom = 2 })
	-- msg.post("@render:", "use_fixed_fit_projection", { near = -1, far = 1 })
	self.near = -1
	self.far = 1
	self.projection_fn = fixed_fit_projection

	local debug_sizes = {
		iphone_xs = {w = 1125, h = 2436},
		iphone_xr = {w = 828, h = 1792},
		iphone_8 = {w = 750, h = 1334},
		iphone_4 = {w = 640, h = 960},
		ipad_pro = {w = 2048, h = 2732},
		ipad_air = {w = 1536, h = 2048},
		pixel_3xl = {w = 1440, h = 2960},
		pixel_slate = {w = 2000, h = 3000},
		galaxy_s10 = {w = 1440, h = 3040},
		galaxy_tab = {w = 1600, h = 2560}
	}

	local debug_view_size = debug_sizes.iphone_xr

	if sys.get_engine_info().is_debug and sys.get_sys_info().system_name == 'Darwin' then
		local ratio = debug_view_size.h / debug_view_size.w
		local x, y, w, h = defos.get_view_size()
		w = h / ratio
		defos.set_view_size(x, y, w, h)
	end

	data.project_width = render.get_width()
	data.project_height = render.get_height()
	self.project_ratio = data.project_height / data.project_width
	data.mid_x = data.project_width / 2
	data.mid_y = data.project_height / 2
	
	update_screen_data(self)
	self.resize_timer = 0
end

function update(self)
	render.set_depth_mask(true)
	render.set_stencil_mask(0xff)
	render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color, [render.BUFFER_DEPTH_BIT] = 1, [render.BUFFER_STENCIL_BIT] = 0})

	render.set_viewport(0, 0, render.get_window_width(), render.get_window_height())
	render.set_view(self.view)

	render.set_depth_mask(false)
	render.disable_state(render.STATE_DEPTH_TEST)
	render.disable_state(render.STATE_STENCIL_TEST)
	render.enable_state(render.STATE_BLEND)
	render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)
	render.disable_state(render.STATE_CULL_FACE)

	render.set_projection(get_projection(self))

	render.draw(self.tile_pred)
	render.draw(self.particle_pred)
	render.draw_debug3d()

	-- render GUI
	--
	render.set_view(vmath.matrix4())
	render.set_projection(vmath.matrix4_orthographic(0, render.get_window_width(), 0, render.get_window_height(), -1, 1))

	render.enable_state(render.STATE_STENCIL_TEST)
	render.draw(self.gui_pred)
	render.draw(self.text_pred)
	render.disable_state(render.STATE_STENCIL_TEST)
end

function on_message(self, message_id, message)
	if message_id == hash("clear_color") then
		self.clear_color = message.color
	elseif message_id == hash("set_view_projection") then
		self.view = message.view
		self.projection = message.projection
	elseif message_id == hash("use_camera_projection") then
		self.projection_fn = function() return self.projection or vmath.matrix4() end
	elseif message_id == hash("use_stretch_projection") then
		self.near = message.near or -1
		self.far = message.far or 1
		self.projection_fn = stretch_projection
	elseif message_id == hash("use_fixed_projection") then
		self.near = message.near or -1
		self.far = message.far or 1
		self.zoom = message.zoom or 1
		self.projection_fn = fixed_projection
	elseif message_id == hash("use_fixed_fit_projection") then
		self.near = message.near or -1
		self.far = message.far or 1
		self.projection_fn = fixed_fit_projection
	elseif message_id == hash('window_resized') then
		timer.cancel(self.resize_timer)
		self.resize_timer = timer.delay(0, false, function()
			print('Window resized')
			update_screen_data(self)
		end)
	end	
end